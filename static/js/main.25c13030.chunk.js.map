{"version":3,"sources":["About.js","Stopwatch.js","formatDuration.js","StopwatchContainer.js","App.js","reportWebVitals.js","index.js"],"names":["About","href","className","title","target","Stopwatch","elapsedMilliseconds","stopwatch","onToggle","onSelect","onLabelChange","type","checked","isSelected","onChange","e","displayTime","Math","floor","toString","padStart","toFixed","value","label","onClick","isPaused","StopwatchContainer","interval","stopwatches","setStopwatches","map","toggleStopwatch","selectStopwatch","updateStopwatchLabel","id","selectedStopwatches","filter","s","length","max","startTime","elapsedTime","timeoutId","stopwatchIds","indexOf","clearInterval","deleteStopwatches","getContainerButtonText","event","updatedStopwatch","updateStopwatchState","tick","stopwatchId","find","Date","getTime","setInterval","targetIndex","findIndex","slice","App","useState","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25c13030.chunk.js","sourcesContent":["export default function About() {\n  return (\n    <div>\n      <h2>Background</h2>\n      <p>As a consultant, I have to track the time I am working on client projects.\n        As a practice manager, other non-billable responsibilities also take time, and I would like to better track the\n        effort I am applying to those activities.\n        For instance, how much time do I spend working on proposals? Or internal initiatives?</p>\n\n      <p>At the time of writing, I've been away from React and other front-end web technologies for a bit, so I decided\n        to roll my own time tracking app.\n        I know there are plenty of free and commercial solutions out there, but I enjoy the process of building and\n        creating.</p>\n\n      <p>I plan to publish updates to the app over time as I expand on its features.\n        I expect to only build features that I am going to use and aim to keep this simple.\n        That said, if you have ideas or want to use this for yourself, feel free to submit a GitHub issue or pull request.</p>\n\n      <a href=\"https://www.iubenda.com/privacy-policy/73184110/legal\" className=\"iubenda-white iubenda-embed\"\n         title=\"Privacy Policy\" target=\"_blank\">Privacy Policy</a>\n    </div>\n  );\n}\n","import './Stopwatch.css';\nimport formatDuration from './formatDuration';\n\nexport default function Stopwatch({stopwatch, onToggle, onSelect, onLabelChange}) {\n  return (\n    <div className={'stopwatch-wrapper'}>\n      <span className={'stopwatch-selector'}>\n        <input type=\"checkbox\" checked={stopwatch.isSelected}\n               onChange={(e) => onSelect(e, stopwatch)}/>\n      </span>\n      <span className={'stopwatch-duration'}>{formatDuration(stopwatch.displayTime)}</span>\n      <span className={'stopwatch-label'}>\n        <input type={'text'} value={stopwatch.label}\n               onChange={(e) => onLabelChange(e, stopwatch)}/>\n      </span>\n      <span className={'stopwatch-toggle-button-wrapper'}>\n        <button type=\"button\"\n                onClick={(e) => onToggle(e, stopwatch)}>\n          {stopwatch.isPaused ? 'Resume' : 'Pause'}\n        </button>\n      </span>\n    </div>\n  );\n};\n","/**\n * Format a time duration.\n * @param {Number} elapsedMilliseconds time in milliseconds to format\n * @returns {string} formatted duration such as 00:00:00.0 (HH:mm:ss.f)\n */\nexport default function formatDuration(elapsedMilliseconds) {\n  return Math.floor(elapsedMilliseconds / 1000 / 60 / 60 % 60).toString().padStart(2, '0') + ':'\n    + Math.floor(elapsedMilliseconds / 1000 / 60 % 60).toString().padStart(2, '0') + ':'\n    + Math.floor(elapsedMilliseconds / 1000 % 60).toString().padStart(2, '0') + '.'\n    + Math.floor(elapsedMilliseconds % 1000 / 100).toFixed(0).toString();\n};\n","import Stopwatch from './Stopwatch';\n\nexport default function StopwatchContainer({interval, stopwatches, setStopwatches}) {\n  return (\n    <div className=\"app-container\">\n      <div className=\"app-body\">\n        {stopwatches.map(stopwatch => (\n          <Stopwatch key={stopwatch.id} stopwatch={stopwatch} onToggle={toggleStopwatch} onSelect={selectStopwatch}\n                     onLabelChange={updateStopwatchLabel}/>))}\n      </div>\n      <footer className=\"app-footer\">\n        <button type=\"button\" className={'button-primary'}\n                onClick={containerAction}>{getContainerButtonText(stopwatches)}</button>\n      </footer>\n    </div>\n  );\n\n  function addStopwatch() {\n    setStopwatches((stopwatches) => [\n      ...stopwatches,\n      {\n        id: Math.max(...stopwatches.map((s) => s.id)) + 1,\n        startTime: 0,\n        elapsedTime: 0,\n        displayTime: 0,\n        label: 'Stopwatch',\n        isPaused: true,\n        isSelected: false,\n        timeoutId: null\n      }\n    ]);\n  }\n\n  function containerAction() {\n    const selectedStopwatches = stopwatches.filter((s) => s.isSelected);\n\n    if (selectedStopwatches.length === 0) {\n      addStopwatch();\n    } else {\n      deleteStopwatches(selectedStopwatches);\n    }\n  }\n\n  function deleteStopwatches(selectedStopwatches) {\n    setStopwatches((stopwatches) => {\n      const stopwatchIds = selectedStopwatches.map((s) => s.id);\n\n      for (const stopwatch of stopwatches.filter((s) => stopwatchIds.indexOf(s.id) !== -1)) {\n        if (stopwatch.timeoutId !== null) {\n          clearInterval(stopwatch.timeoutId);\n        }\n      }\n\n      return [\n        ...stopwatches.filter((s) => stopwatchIds.indexOf(s.id) === -1)\n      ];\n    });\n  }\n\n  function selectStopwatch(event, stopwatch) {\n    const updatedStopwatch = {\n      ...stopwatch,\n      isSelected: !stopwatch.isSelected\n    };\n\n    setStopwatches(updateStopwatchState(updatedStopwatch));\n  }\n\n  function tick(stopwatchId) {\n    setStopwatches((stopwatches) => {\n      const stopwatch = stopwatches.find((s) => s.id === stopwatchId);\n      const updatedStopwatch = {\n        ...stopwatch,\n        displayTime: stopwatch.elapsedTime + (new Date()).getTime() - stopwatch.startTime\n      };\n\n      return updateStopwatchState(updatedStopwatch)(stopwatches);\n    });\n  }\n\n  function toggleStopwatch(event, stopwatch) {\n    const updatedStopwatch = {\n      ...stopwatch,\n      isPaused: !stopwatch.isPaused\n    };\n\n    if (updatedStopwatch.isPaused) {\n      clearInterval(stopwatch.timeoutId);\n      updatedStopwatch.timeoutId = null;\n      updatedStopwatch.elapsedTime += (new Date()).getTime() - updatedStopwatch.startTime;\n    } else {\n      updatedStopwatch.timeoutId = setInterval(tick, interval, stopwatch.id);\n      updatedStopwatch.startTime = (new Date()).getTime();\n    }\n\n    setStopwatches(updateStopwatchState(updatedStopwatch));\n  }\n\n  function updateStopwatchLabel(event, stopwatch) {\n    setStopwatches(updateStopwatchState({\n      ...stopwatch,\n      label: event.target.value\n    }));\n  }\n\n  function updateStopwatchState(updatedStopwatch) {\n    return (stopwatches) => {\n      const targetIndex = stopwatches.findIndex((s) => s.id === updatedStopwatch.id);\n\n      return [\n        ...stopwatches.slice(0, targetIndex),\n        updatedStopwatch,\n        ...stopwatches.slice(targetIndex + 1, stopwatches.length)\n      ]\n    };\n  }\n};\n\nfunction getContainerButtonText(stopwatches) {\n  if (stopwatches.findIndex((s) => s.isSelected) === -1) {\n    return 'Add';\n  }\n  return 'Delete';\n}","import {HashRouter as Router, Link, Route, Switch} from 'react-router-dom';\nimport About from './About';\nimport './App.css';\nimport StopwatchContainer from './StopwatchContainer';\nimport {useState} from 'react';\n\nexport default function App() {\n  const [stopwatches, setStopwatches] = useState([{\n    id: 0,\n    startTime: 0,\n    elapsedTime: 0,\n    displayTime: 0,\n    label: 'Stopwatch',\n    isPaused: true,\n    isSelected: false,\n    timeoutId: null\n  }]);\n  const interval = 100\n\n  return (\n    <Router>\n      <div className=\"app-root\">\n        <header className=\"app-header\">\n          <div className=\"app-header-title\">\n            <Link to=\"/\"><h1>Time Tracker</h1></Link>\n          </div>\n          <nav className=\"app-header-nav\">\n            <Link to=\"/about\" className=\"app-header-toggle\">About</Link>\n          </nav>\n        </header>\n        <div className=\"app-wrapper\">\n          <Switch>\n            <Route path=\"/about\">\n              <About/>\n            </Route>\n            <Route path=\"/\">\n              <StopwatchContainer interval={interval} stopwatches={stopwatches} setStopwatches={setStopwatches} />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}